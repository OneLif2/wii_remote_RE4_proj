//Autocalibration: Set remote flat and wait for 100% before use.

if Wiimote.Dot1Vis then
  var.dot1vis = 1
else
  var.dot1vis = 0
endif

if Wiimote.Dot2Vis then
  var.dot2vis = 1
else
  var.dot2vis = 0
endif

if Wiimote.Dot3Vis then
  var.dot3vis = 1
else
  var.dot3vis = 0
endif

if Wiimote.Dot4Vis then
  var.dot4vis = 1
else
  var.dot4vis = 0
endif


// Debug window output
'debug = " Battery Life: " + wiimote.Battery + " | SmoothPitch: " + var.SmoothPitch + " SmoothRoll: " + var.SmoothRoll + " PointerVisible: " + wiimote.PointerVisible + " SmoothRoll: " + wiimote.Nunchuk.SmoothRoll + " SmoothPitch: " + wiimote.Nunchuk.SmoothPitch + " Shakiness: " + wiimote.Shakiness
debug = "dotvis: " + var.dot1vis + var.dot2vis + var.dot3vis + var.dot4vis + "PointerXY: " + wiimote.PointerXY + " | dot1: " + wiimote.dot1x + "|" + wiimote.dot1y + " | dot2: "  + wiimote.dot2x + "|" + wiimote.dot2y + " | dot3x: " + wiimote.dot3x + "|" + wiimote.dot3y + " | dot4x: " + wiimote.dot4x + "|" + wiimote.dot4y + " | PointerVisible: " + wiimote.PointerVisible
PIE.FrameRate = 100hz

//Wiimote
var.ButtonFreezeTime = 200ms
keyboard.Up and keyboard.W = Wiimote.Up
mouse.RightButton and keyboard.Down and keyboard.S = Wiimote.Down
keyboard.Left and keyboard.A = Wiimote.Left
keyboard.Right and keyboard.D = Wiimote.Right
mouse.LeftButton = Clicked(wiimote.A)
mouse.LeftButton = wiimote.B
keyboard.Q = Wiimote.One // Change Rod Change
keyboard.Shift and keyboard.E and keyboard.I and keyboard.P = Wiimote.Two // Change Bait Change
key.NumpadPlus and mouse.WheelUp = Wiimote.Plus // Scroll Up
key.NumpadMinus and mouse.WheelDown = Wiimote.Minus // Scroll Down
key.M = wiimote1.home
var.SmoothRoll = Smooth(wiimote.SmoothRoll , 10 , 1)
var.SmoothPitch = Smooth(wiimote.SmoothPitch , 10 , 1)

// Smooth the roll and pitch values
var.SmoothRoll = Smooth(wiimote.SmoothRoll , 10 , 0.25)
var.SmoothPitch = Smooth(wiimote.SmoothPitch , 10 , 0.25)

if wiimote.Shakiness >= 20 then
   //do something

endif

//nunchuck
key.WASD = Nunchuk.Joy
key.Z = Nunchuck.Z
key.C = Nunchuck.C
var.Nunchuk.Shake = wiimote.Nunchuk.Shake
var.LongPress = Nunchuk.Joy
if DoubleClicked(Nunchuck.Z) and var.LongPress then
   var.counter1 = var.counter1 + 1
endif

if wiimote.Nunchuk.Shakiness >= 20 then
   //do something

endif


// =================== Mouse movement =================== 
var.filter_mode = 1

if not wiimote.PointerVisible then

    var.sensitivityGyro = [.3, .3] // Change To Higher or Lower Values to Increase or Decrease Sensitivity
    var.deadzoneGyro = [0, 0]
    var.Gyro = [0, 0]
    
    // Update Gyro values
    if (Abs(WiiMote.MotionPlus.YawSpeed + var.calibrationGyro[1]) > var.deadzoneGyro[1]) then
        var.Gyro[1] = RemoveUnits(WiiMote.MotionPlus.YawSpeed + var.calibrationGyro[1]) - (Sign(WiiMote.MotionPlus.YawSpeed) * var.deadzoneGyro[1])
    endif
    
    if (Abs(WiiMote.MotionPlus.PitchSpeed + var.calibrationGyro[2]) > var.deadzoneGyro[2]) then
        var.Gyro[2] = RemoveUnits(WiiMote.MotionPlus.PitchSpeed + var.calibrationGyro[2]) - (Sign(WiiMote.MotionPlus.PitchSpeed) * var.deadzoneGyro[2])
    endif

    Mouse.DirectInputX = Mouse.DirectInputX + (var.Gyro[1] * var.sensitivityGyro[1])
    Mouse.DirectInputY = Mouse.DirectInputY + (-1 * var.Gyro[2] * var.sensitivityGyro[2])

    'mouse.y = MapRange(var.SmoothPitch,32,15,0,1)

elseif wiimote.PointerVisible then
    //var.rawmousex = MapRange(Smooth(Wiimote.SmoothPointerX , 10 , 0.0018),0.1,0.9,0,1)
    //var.rawmousey = MapRange(Smooth(Wiimote.SmoothPointerY , 10 , 0.0018),0.3,0.95,0,1)
    var.rawmousex = MapRange(wiimote.PointerX ,-0.18,1.18,0,1)
    var.rawmousey = MapRange(wiimote.PointerY ,0.02,0.98,0,1)

    if var.filter_mode == 0 then  // no filter
        mouse.x = var.rawmousex
        mouse.y = var.rawmousey
        //mouse.x = MapRange(wiimote.PointerX ,-0.09,1.14,0,1)
        //mouse.y = MapRange(wiimote.PointerY ,0.08,1,0,1)

    elseif var.filter_mode == 1 then  // Low-pass filter
        var.alpha = 0.3
        var.filteredmousex = var.alpha * var.filteredmousex + (1 - var.alpha) * var.rawmousex
        var.filteredmousey = var.alpha * var.filteredmousey + (1 - var.alpha) * var.rawmousey

        'mouse.x = var.filteredmousex
        mouse.y = var.filteredmousey
        if var.filteredmousex >= 0 and var.filteredmousex < 0.1 then
           mouse.x = MapRange(var.filteredmousex, 0, 0.15, 0, 0.2)
        elseif var.filteredmousex >= 0.1 and var.filteredmousex < 0.9 then
           mouse.x = MapRange(var.filteredmousex, 0.15, 0.85, 0.2, 0.8)
        else
           mouse.x = MapRange(var.filteredmousex, 0.85, 1, 0.8, 1)
        endif


    elseif var.filter_mode == 2 then  // Exponential moving average (EMA)
        var.alpha = 0.7
        var.avgmousex = var.alpha * var.rawmousex + (1 - var.alpha) * var.avgmousex
        var.avgmousey = var.alpha * var.rawmousey + (1 - var.alpha) * var.avgmousey

        mouse.x = var.avgmousex
        mouse.y = var.avgmousey


    elseif var.filter_mode == 3 then  // Dead zone
        var.dead_zone = 0.0015
        if abs(var.rawmousex - mouse.x) > var.dead_zone or abs(var.rawmousey - mouse.y) > var.dead_zone then
            mouse.x = var.rawmousex
            mouse.y = var.rawmousey
        endif
    endif
endif
// =================== Mouse movement =================== 

//LED script

if (wiimote1.Exists) {
   var.Battery = wiimote1.Battery
   if var.Battery < 20 then
     var.leds = not var.leds
     if var.leds = true then
          wiimote.Leds = 8
          wait RoundTo(var.Battery / 20, 1) * 1000 ms
     elseif var.leds = false then
          wiimote.Leds = 0
          wait RoundTo((20 - var.Battery) / 20, 1) * 1000 ms
     end if
   elseif var.Battery >= 80 then
      wiimote1.Leds = 15
   elseif var.Battery >= 60 then
      wiimote1.Leds = 14
   elseif var.Battery >= 40 then
      wiimote1.Leds = 12
   else
      wiimote1.Leds = 8
   endif
endif

// ====================== Function for roll and pitch up / down ======================
// Store the initial values of SmoothRoll and SmoothPitch when Nunchuck.Z is pressed
if Nunchuck.Z and not var.zPressed then
    var.initialRoll = var.SmoothRoll
    var.initialPitch = var.SmoothPitch
    //var.movedRoll = var.SmoothRoll
    //var.movedPitch = var.SmoothPitch
    var.zPressed = true
    var.CounterUpdated = false
    var.mode = "none"
elseif not Nunchuck.Z then
    var.zPressed = false
endif

var.pitch0 = var.pitch1
var.pitch1 = var.pitch2
var.pitch2 = var.SmoothPitch
var.avgpitch = (var.pitch0 + var.pitch1 + var.pitch2) / 3

if var.zPressed then
    if var.mode == "none" and not var.CounterUpdated and var.Shakiness < 6 and abs(var.avgpitch - var.SmoothPitch) <= 0.5 then
        if (abs(var.SmoothPitch - var.initialPitch) >= abs(var.SmoothRoll - var.initialRoll)) and (var.SmoothPitch >= 40 or var.SmoothPitch <= -20) then
            if var.SmoothPitch - var.initialPitch >= 40 then
                var.pitchCounter = var.pitchCounter + 1
                var.CounterUpdated = true
                var.mode = "pitchUp"
                var.movedPitch = var.SmoothPitch
            elseif var.SmoothPitch - var.initialPitch <= -20 then
                var.pitchCounter = var.pitchCounter - 1
                var.CounterUpdated = true
                var.mode = "pitchDown"
                var.movedPitch = var.SmoothPitch
            endif
        elseif (var.SmoothRoll > 40 or var.SmoothRoll < -40) and (var.SmoothPitch < 45 or var.SmoothPitch > -10) then
            if var.SmoothRoll - var.initialRoll >= 45 then
                var.rollCounter = var.rollCounter + 1
                var.CounterUpdated = true
                var.mode = "rollUp"
                var.movedRoll = var.SmoothRoll
            elseif var.SmoothRoll - var.initialRoll <= -45 then
                var.rollCounter = var.rollCounter - 1
                var.CounterUpdated = true
                var.mode = "rollDown"
                var.movedRoll = var.SmoothRoll
            endif
        endif

    elseif var.mode == "rollUp" and var.CounterUpdated  then
        if var.SmoothRoll - var.movedRoll <= -25 then
            var.CounterUpdated = false
            var.mode = "none"
        endif

    elseif var.mode == "rollDown" and var.CounterUpdated  then
        if var.SmoothRoll - var.movedRoll >= 25 then
            var.CounterUpdated = false
            var.mode = "none"
        endif

    elseif var.mode == "pitchUp" and var.CounterUpdated  then
        if var.SmoothPitch - var.movedPitch <= -25 then
            var.CounterUpdated = false
            var.mode = "none"
        endif

    elseif var.mode == "pitchDown" and var.CounterUpdated  then
        if var.SmoothPitch - var.movedPitch >= 25 then
            var.CounterUpdated = false
            var.mode = "none"
        endif
    endif
endif
// ====================== Function for roll and pitch up / down ====================== 

//===========Swing function=============//
// Add custom variables
var.swingDelay = 500ms
// Detect horizontal and vertical swings with a 500ms delay
if wiimote.Shake and (wiimote.SwingHorizontal or wiimote.SwingVertical) and not (wiimote.SwingHorizontal and wiimote.SwingVertical) then
    if wiimote.SwingHorizontal then
        var.SwingHorizontal = var.SwingHorizontal + 1
    endif

    if wiimote.SwingVertical then
        var.SwingVertical = var.SwingVertical + 1
    endif

    wait var.swingDelay
endif

if wiimote.SwingLeftRight then
   var.SwingLeftRight = var.SwingLeftRight + 1
endif
//===========Swing function=============//

